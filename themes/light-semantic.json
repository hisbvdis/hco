{
	"$schema": "vscode://schemas/color-theme",
	"type": "light",
	"name": "HCO-light-saturated",
	"colors": {
		// ======================================================
		// MAIN BACKGROUND
		// ======================================================
		"editor.background": "#ededed", /* Current */
		// "editor.background": "#f2f2f2", /* Experiment */
		"sideBar.background": "#ededed",

		// ======================================================
		// MAIN FOREGROUND
		// ======================================================
		"editor.foreground": "#000000",

		// ======================================================
		// TABS
		// ======================================================
		// Active tab
		"tab.activeBackground": "#ededed",
		// Inactive tab
		"tab.inactiveBackground": "#d9d9d9",
		// Tabs bar background
		"editorGroupHeader.tabsBackground": "#cfcfcf",

		// ======================================================
		// SIDEBAR
		// ======================================================
		// Active tab
		"sideBar.border": "#C7C7C7",

		// ======================================================
		// BRACKETS AND BRACKET GUIDES
		// ======================================================
		"editorBracketHighlight.foreground1": "#333333",
		"editorBracketHighlight.foreground2": "#333333",
		"editorBracketHighlight.foreground3": "#333333",
		"editorBracketHighlight.foreground4": "#333333",
		"editorBracketPairGuide.activeBackground1": "#333333",
		"editorBracketPairGuide.activeBackground2": "#333333",
		"editorBracketPairGuide.activeBackground3": "#333333",
		"editorBracketPairGuide.activeBackground4": "#333333",
	},
	"tokenColors": [
		{
			"scope": [
				// JSON property key
				"support.type.property-name.json",
				// Variables inside the template string
				"meta.embedded",
				// Markdown: commands flags
				"constant.other.option",
				// CSS property name
				"meta.property-name support.type",
				// BAD: replaces "function" highlighting
				// "variable.other",
			],
			"settings": {
				"foreground": "#000000"
			}
		},
		{
			"scope": [
				// const, let, function
				"storage",
				// new, typeof,
				"keyword",
				// true/false
				"constant.language",
				// First and last curly braces of variable inside template string
				"punctuation.definition.template-expression.begin",
				"punctuation.definition.template-expression.end",
				// Curlies inside JSX tags
				// "punctuation.section.embedded",
			],
			"settings": {
				"foreground": "#2600e6" /* Current (Bold font) */
				// "foreground": "#1300e6" /* Current (Regular font) */
				// "foreground": "#1400f5" /* Experimentes */
			}
		},
		{
			"scope": [
				// User function name
				"entity.name.function",
				// Any function calls and methods (doesn't highlight function call in code popups)
				// "meta.function-call.generic",
				// CSS func
				"support.function",
				// "entity.name.type.class",
			],
			"settings": {
				"foreground": "#009CCC" /* Current */
				// "foreground": "#00aacc"    /* Hue: -1 */
			}
		},
		{
			"scope": [
				"keyword.operator",
			],
			"settings": {
				// "foreground": "#0184BC"
			}
		},
		{
			"scope": [
				// return, import, if/else
				"keyword.control",
			],
			"settings": {
				"foreground": "#9A2FD0" /* Current */
			}
		},
		{
			"scope": [
				// HTML tags
				"entity.name.tag",
				// JSX tags
				"support.class.component",
			],
			"settings": {
				// "foreground": "#c20020" /* Current */
				"foreground": "#c20030" /* Experiment */
			}
		},
		{
			"scope": [
				// Attributes
				"entity.other.attribute-name",
			],
			"settings": {
				"foreground": "#ffa3b3"
			}
		},
		{
			"scope": [
				// Strings
				"string",
				// Markdown: Code in backticks
				"markup.inline.raw",
			],
			"settings": {
				// "foreground": "#40A02B" /* Current */
				"foreground": "#3f9d2a" /* Experiment */
			}
		},
		{
			"scope": [
				"constant.numeric",
				"keyword.other.unit"
			],
			"settings": {
				"foreground": "#0451a5"
			}
		},
		{
			"scope": [
				// Markdown: Heading
				"markup.heading"
			],
			"settings": {
				"foreground": "#a21319"
			}
		},
		{
			"scope": [
				// Comments
				"comment",
			],
			"settings": {
				"foreground": "#9e9e9e" /* Current */
				// "foreground": "#969896" /* Experiment */
			}
		},
		{
			"scope": [
				// HTML angel brackets
				"punctuation.definition.tag",
			],
			"settings": {
				"foreground": "#737373" /* Current */
			}
		},
		{
			"scope": [
				// Function parameters (only in parameters section)
				// "meta.parameters variable.parameter"
				// "variable.parameter"
			],
			"settings": {
				"foreground": "#bd5e00" /* Current */
				// "foreground": "#bd5800" /* Experimental */
			}
		},
		{
			"scope": [
				// primitives
				"support.type",
				// Generic parameters
				// - bad:  highlights "class" and others
				// - good: highlights "interfaces" in code popups
				// "entity.name.type",
				// Return type:
				// - good: sets color to the type assignment of the "class" without color
				"meta.return.type entity.name.type",
				"meta.type.annotation entity.name.type",
				"meta.type.parameters entity.name.type",
			],
			"settings": {
				"foreground": "#ad9f00"
			}
		},
		{
			"scope": [
				// const, let, function
				"storage",
				// JSX tags
				"support.class.component",
				// HTML tags
				"entity.name.tag",
				// Markdown: Heading
				"markup.heading",
				// Markdown: Bold
				"markup.bold",
			],
			"settings": {
				"fontStyle": "bold"
			}
		},
		{
			"scope": [
				// return, import, if/else
				"keyword.control",
				// Comments
				"comment",
				// Markdown: italic formatting
				"markup.italic",
			],
			"settings": {
				"fontStyle": "italic"
			}
		},
		{
			"scope":[

			],
			"settings": {
				"fontStyle": "italic bold"
			}
		},
		{
			"scope": [
				// async, extends, public, readonly
				// "storage.modifier",
				// Arrow function's "arrow" character
				"storage.type.function.arrow",
			],
			"settings": {
				"fontStyle": ""
			}
		}
	],
	"semanticHighlighting": true,
	"semanticTokenColors": {
		// TS: interface type
		"interface": "#ad9f00",
		// TS: generic parameters
		"typeParameter": "#ad9f00",
		// Function parameters
		"parameter.declaration": "#BD5E00",
		"class.declaration": "#009CCC",
		"enum": "#ad9f00",
		"class.defaultLibrary": "#009CCC",
	}
}